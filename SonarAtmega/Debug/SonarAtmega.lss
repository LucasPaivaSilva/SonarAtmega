
SonarAtmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005dc  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800110  00800110  00000680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106f  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e3  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fd  00000000  00000000  000020ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa4  00000000  00000000  00002d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00003836  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 32       	cpi	r26, 0x22	; 34
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <main>
  9e:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ident_num>:
}
//---------------------------------------------------------------------------------------------
//Conversão de um número em seus digitos individuais
//---------------------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{   
  a6:	ac 01       	movw	r20, r24
  a8:	fb 01       	movw	r30, r22
  aa:	db 01       	movw	r26, r22
  ac:	9b 01       	movw	r18, r22
  ae:	2b 5f       	subi	r18, 0xFB	; 251
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
 	unsigned char n;

	for(n=0; n<tam_vetor; n++)
		disp[n] = 0 + conv_ascii;		//limpa vetor para armazenagem do digitos 
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	8d 93       	st	X+, r24
//---------------------------------------------------------------------------------------------
void ident_num(unsigned int valor, unsigned char *disp)
{   
 	unsigned char n;

	for(n=0; n<tam_vetor; n++)
  b6:	a2 17       	cp	r26, r18
  b8:	b3 07       	cpc	r27, r19
  ba:	e1 f7       	brne	.-8      	; 0xb4 <ident_num+0xe>
		disp[n] = 0 + conv_ascii;		//limpa vetor para armazenagem do digitos 

	do
	{
       *disp = (valor%10) + conv_ascii;	//pega o resto da divisao por 10 
  bc:	9a 01       	movw	r18, r20
  be:	ad ec       	ldi	r26, 0xCD	; 205
  c0:	bc ec       	ldi	r27, 0xCC	; 204
  c2:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__umulhisi3>
  c6:	96 95       	lsr	r25
  c8:	87 95       	ror	r24
  ca:	96 95       	lsr	r25
  cc:	87 95       	ror	r24
  ce:	96 95       	lsr	r25
  d0:	87 95       	ror	r24
  d2:	9c 01       	movw	r18, r24
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	82 0f       	add	r24, r18
  e6:	93 1f       	adc	r25, r19
  e8:	9a 01       	movw	r18, r20
  ea:	28 1b       	sub	r18, r24
  ec:	39 0b       	sbc	r19, r25
  ee:	c9 01       	movw	r24, r18
  f0:	80 5d       	subi	r24, 0xD0	; 208
  f2:	81 93       	st	Z+, r24
	   valor /=10;						//pega o inteiro da divisão por 10
  f4:	9a 01       	movw	r18, r20
  f6:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__umulhisi3>
  fa:	ac 01       	movw	r20, r24
  fc:	56 95       	lsr	r21
  fe:	47 95       	ror	r20
 100:	56 95       	lsr	r21
 102:	47 95       	ror	r20
 104:	56 95       	lsr	r21
 106:	47 95       	ror	r20
	   disp++;

	}while (valor!=0);
 108:	41 15       	cp	r20, r1
 10a:	51 05       	cpc	r21, r1
 10c:	b9 f6       	brne	.-82     	; 0xbc <ident_num+0x16>
}
 10e:	08 95       	ret

00000110 <__vector_14>:

unsigned char digits[4];
unsigned char segValue [16] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x18, 0x08, 0x03, 0x46, 0x21, 0x06, 0x0E};
	
ISR(TIMER0_COMPA_vect) //interrupção do TC1
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	y++;
 132:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <y>
 136:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <y+0x1>
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <y+0x1>
 140:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <y>
	ident_num(x, digits);
 144:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <x>
 148:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <x+0x1>
 14c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <x+0x2>
 150:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <x+0x3>
 154:	0e 94 b3 01 	call	0x366	; 0x366 <__fixunssfsi>
 158:	dc 01       	movw	r26, r24
 15a:	cb 01       	movw	r24, r22
 15c:	6e e1       	ldi	r22, 0x1E	; 30
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <ident_num>
	switch (y)
 164:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <y>
 168:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <y+0x1>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	91 05       	cpc	r25, r1
 170:	a1 f0       	breq	.+40     	; 0x19a <__vector_14+0x8a>
 172:	1c f4       	brge	.+6      	; 0x17a <__vector_14+0x6a>
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	39 f0       	breq	.+14     	; 0x186 <__vector_14+0x76>
 178:	31 c0       	rjmp	.+98     	; 0x1dc <__vector_14+0xcc>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	91 05       	cpc	r25, r1
 17e:	b9 f0       	breq	.+46     	; 0x1ae <__vector_14+0x9e>
 180:	04 97       	sbiw	r24, 0x04	; 4
 182:	f9 f0       	breq	.+62     	; 0x1c2 <__vector_14+0xb2>
 184:	2b c0       	rjmp	.+86     	; 0x1dc <__vector_14+0xcc>
	{
		case 1:
		PORTC = 0b1111110;
 186:	8e e7       	ldi	r24, 0x7E	; 126
 188:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[0]- '0'];
 18a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <digits>
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	e0 53       	subi	r30, 0x30	; 48
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	80 81       	ld	r24, Z
 196:	8b b9       	out	0x0b, r24	; 11
		break;
 198:	21 c0       	rjmp	.+66     	; 0x1dc <__vector_14+0xcc>

		case 2:
		PORTC = 0b1111101;
 19a:	8d e7       	ldi	r24, 0x7D	; 125
 19c:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[1]- '0'];
 19e:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <digits+0x1>
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	e0 53       	subi	r30, 0x30	; 48
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	80 81       	ld	r24, Z
 1aa:	8b b9       	out	0x0b, r24	; 11
		break;
 1ac:	17 c0       	rjmp	.+46     	; 0x1dc <__vector_14+0xcc>
		
		case 3:
		PORTC = 0b1111011;
 1ae:	8b e7       	ldi	r24, 0x7B	; 123
 1b0:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[2]- '0'];
 1b2:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <digits+0x2>
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	e0 53       	subi	r30, 0x30	; 48
 1ba:	ff 4f       	sbci	r31, 0xFF	; 255
 1bc:	80 81       	ld	r24, Z
 1be:	8b b9       	out	0x0b, r24	; 11
		break;
 1c0:	0d c0       	rjmp	.+26     	; 0x1dc <__vector_14+0xcc>
		
		case 4:
		PORTC = 0b1110111;
 1c2:	87 e7       	ldi	r24, 0x77	; 119
 1c4:	88 b9       	out	0x08, r24	; 8
		PORTD = segValue[digits[3]- '0'];
 1c6:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <digits+0x3>
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	e0 53       	subi	r30, 0x30	; 48
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	80 81       	ld	r24, Z
 1d2:	8b b9       	out	0x0b, r24	; 11
		y = 0;
 1d4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <y+0x1>
 1d8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <y>
		break;	
	}
	
}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	7f 91       	pop	r23
 1ea:	6f 91       	pop	r22
 1ec:	5f 91       	pop	r21
 1ee:	4f 91       	pop	r20
 1f0:	3f 91       	pop	r19
 1f2:	2f 91       	pop	r18
 1f4:	0f 90       	pop	r0
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	0f 90       	pop	r0
 1fa:	1f 90       	pop	r1
 1fc:	18 95       	reti

000001fe <__vector_10>:

ISR(TIMER1_CAPT_vect) //interrupção do T1
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	ef 93       	push	r30
 21e:	ff 93       	push	r31
	if (tst_bit(TCCR1B, ICES1))
 220:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 224:	86 ff       	sbrs	r24, 6
 226:	0e c0       	rjmp	.+28     	; 0x244 <__vector_10+0x46>
	{
		clr_bit(TCCR1B, ICES1);
 228:	e1 e8       	ldi	r30, 0x81	; 129
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8f 7b       	andi	r24, 0xBF	; 191
 230:	80 83       	st	Z, r24
		Ts = ICR1;
 232:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 236:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 23a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Ts+0x1>
 23e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Ts>
 242:	2b c0       	rjmp	.+86     	; 0x29a <__vector_10+0x9c>
	} 
	else
	{
		set_bit(TCCR1B, ICES1);
 244:	e1 e8       	ldi	r30, 0x81	; 129
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	80 83       	st	Z, r24
		Td = ICR1;
 24e:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 252:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 256:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <Td+0x1>
 25a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <Td>
		Tf = Td - Ts;
 25e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Ts>
 262:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Ts+0x1>
 266:	68 1b       	sub	r22, r24
 268:	79 0b       	sbc	r23, r25
 26a:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <Tf+0x1>
 26e:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <Tf>
		//Tf = 1024/(16*(Tf+1));
		x = Tf * 1.1;
 272:	07 2e       	mov	r0, r23
 274:	00 0c       	add	r0, r0
 276:	88 0b       	sbc	r24, r24
 278:	99 0b       	sbc	r25, r25
 27a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__floatsisf>
 27e:	2d ec       	ldi	r18, 0xCD	; 205
 280:	3c ec       	ldi	r19, 0xCC	; 204
 282:	4c e8       	ldi	r20, 0x8C	; 140
 284:	5f e3       	ldi	r21, 0x3F	; 63
 286:	0e 94 48 02 	call	0x490	; 0x490 <__mulsf3>
 28a:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <x>
 28e:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <x+0x1>
 292:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <x+0x2>
 296:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <x+0x3>
	}
	
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <__vector_7>:

ISR(TIMER2_COMPA_vect) //interrupção do TC1
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
	ToBuzz++;
 2ca:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2ce:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 2d2:	01 96       	adiw	r24, 0x01	; 1
 2d4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 2d8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	if (ToBuzz >= 60)
 2dc:	cc 97       	sbiw	r24, 0x3c	; 60
 2de:	24 f0       	brlt	.+8      	; 0x2e8 <__vector_7+0x2c>
	{
		cpl_bit(PORTB, PB2);
 2e0:	95 b1       	in	r25, 0x05	; 5
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	89 27       	eor	r24, r25
 2e6:	85 b9       	out	0x05, r24	; 5
	}
}
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <main>:



int main(void)
{
	DDRD  = 0xFF;	//Conigura como saida
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	8a b9       	out	0x0a, r24	; 10
	DDRC  = 0xFF;	//Conigura como saida
 2fa:	87 b9       	out	0x07, r24	; 7
	DDRB  = 0b11111110;	//Configura como entrada
 2fc:	8e ef       	ldi	r24, 0xFE	; 254
 2fe:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b11111001;	//Habilita pull up's
 300:	89 ef       	ldi	r24, 0xF9	; 249
 302:	85 b9       	out	0x05, r24	; 5
	
	
	TCNT0 = 0;
 304:	16 bc       	out	0x26, r1	; 38
	OCR0A = 77;
 306:	8d e4       	ldi	r24, 0x4D	; 77
 308:	87 bd       	out	0x27, r24	; 39
	TCCR0B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TC1 com prescaler de 1024
 30a:	9d e0       	ldi	r25, 0x0D	; 13
 30c:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A); //habilita a interrupção do T1
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	TCNT1 = 0;									 							 
 314:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 318:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B = (1<<CS10) | (1<<CS12) | (1<<ICES1); 
 31c:	25 e4       	ldi	r18, 0x45	; 69
 31e:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<ICIE1);
 322:	20 e2       	ldi	r18, 0x20	; 32
 324:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sei();
 328:	78 94       	sei
	
	TCNT2 = 0;
 32a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2B = (1<<CS10) | (1<<CS12) | (1<<WGM12);//TC1 com prescaler de 1024
 32e:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIMSK2 = (1<<OCIE2A); //habilita a interrupção do T1
 332:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	
    while (1) 
    {
	set_bit(PORTB, PB1);
 336:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 338:	25 e3       	ldi	r18, 0x35	; 53
 33a:	2a 95       	dec	r18
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0x44>
 33e:	00 00       	nop
	_delay_us(10);
	clr_bit(PORTB, PB1);
 340:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	99 e6       	ldi	r25, 0x69	; 105
 346:	28 e1       	ldi	r18, 0x18	; 24
 348:	81 50       	subi	r24, 0x01	; 1
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	20 40       	sbci	r18, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x52>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x5c>
 352:	00 00       	nop
	_delay_ms(500);
	Ts = 0;
 354:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Ts+0x1>
 358:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Ts>
	Td = 0;
 35c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Td+0x1>
 360:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Td>
 364:	e8 cf       	rjmp	.-48     	; 0x336 <main+0x40>

00000366 <__fixunssfsi>:
 366:	0e 94 27 02 	call	0x44e	; 0x44e <__fp_splitA>
 36a:	88 f0       	brcs	.+34     	; 0x38e <__fixunssfsi+0x28>
 36c:	9f 57       	subi	r25, 0x7F	; 127
 36e:	98 f0       	brcs	.+38     	; 0x396 <__fixunssfsi+0x30>
 370:	b9 2f       	mov	r27, r25
 372:	99 27       	eor	r25, r25
 374:	b7 51       	subi	r27, 0x17	; 23
 376:	b0 f0       	brcs	.+44     	; 0x3a4 <__fixunssfsi+0x3e>
 378:	e1 f0       	breq	.+56     	; 0x3b2 <__fixunssfsi+0x4c>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	88 1f       	adc	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	1a f0       	brmi	.+6      	; 0x38a <__fixunssfsi+0x24>
 384:	ba 95       	dec	r27
 386:	c9 f7       	brne	.-14     	; 0x37a <__fixunssfsi+0x14>
 388:	14 c0       	rjmp	.+40     	; 0x3b2 <__fixunssfsi+0x4c>
 38a:	b1 30       	cpi	r27, 0x01	; 1
 38c:	91 f0       	breq	.+36     	; 0x3b2 <__fixunssfsi+0x4c>
 38e:	0e 94 41 02 	call	0x482	; 0x482 <__fp_zero>
 392:	b1 e0       	ldi	r27, 0x01	; 1
 394:	08 95       	ret
 396:	0c 94 41 02 	jmp	0x482	; 0x482 <__fp_zero>
 39a:	67 2f       	mov	r22, r23
 39c:	78 2f       	mov	r23, r24
 39e:	88 27       	eor	r24, r24
 3a0:	b8 5f       	subi	r27, 0xF8	; 248
 3a2:	39 f0       	breq	.+14     	; 0x3b2 <__fixunssfsi+0x4c>
 3a4:	b9 3f       	cpi	r27, 0xF9	; 249
 3a6:	cc f3       	brlt	.-14     	; 0x39a <__fixunssfsi+0x34>
 3a8:	86 95       	lsr	r24
 3aa:	77 95       	ror	r23
 3ac:	67 95       	ror	r22
 3ae:	b3 95       	inc	r27
 3b0:	d9 f7       	brne	.-10     	; 0x3a8 <__fixunssfsi+0x42>
 3b2:	3e f4       	brtc	.+14     	; 0x3c2 <__fixunssfsi+0x5c>
 3b4:	90 95       	com	r25
 3b6:	80 95       	com	r24
 3b8:	70 95       	com	r23
 3ba:	61 95       	neg	r22
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	8f 4f       	sbci	r24, 0xFF	; 255
 3c0:	9f 4f       	sbci	r25, 0xFF	; 255
 3c2:	08 95       	ret

000003c4 <__floatunsisf>:
 3c4:	e8 94       	clt
 3c6:	09 c0       	rjmp	.+18     	; 0x3da <__floatsisf+0x12>

000003c8 <__floatsisf>:
 3c8:	97 fb       	bst	r25, 7
 3ca:	3e f4       	brtc	.+14     	; 0x3da <__floatsisf+0x12>
 3cc:	90 95       	com	r25
 3ce:	80 95       	com	r24
 3d0:	70 95       	com	r23
 3d2:	61 95       	neg	r22
 3d4:	7f 4f       	sbci	r23, 0xFF	; 255
 3d6:	8f 4f       	sbci	r24, 0xFF	; 255
 3d8:	9f 4f       	sbci	r25, 0xFF	; 255
 3da:	99 23       	and	r25, r25
 3dc:	a9 f0       	breq	.+42     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3de:	f9 2f       	mov	r31, r25
 3e0:	96 e9       	ldi	r25, 0x96	; 150
 3e2:	bb 27       	eor	r27, r27
 3e4:	93 95       	inc	r25
 3e6:	f6 95       	lsr	r31
 3e8:	87 95       	ror	r24
 3ea:	77 95       	ror	r23
 3ec:	67 95       	ror	r22
 3ee:	b7 95       	ror	r27
 3f0:	f1 11       	cpse	r31, r1
 3f2:	f8 cf       	rjmp	.-16     	; 0x3e4 <__floatsisf+0x1c>
 3f4:	fa f4       	brpl	.+62     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3f6:	bb 0f       	add	r27, r27
 3f8:	11 f4       	brne	.+4      	; 0x3fe <__floatsisf+0x36>
 3fa:	60 ff       	sbrs	r22, 0
 3fc:	1b c0       	rjmp	.+54     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	8f 4f       	sbci	r24, 0xFF	; 255
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	16 c0       	rjmp	.+44     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 408:	88 23       	and	r24, r24
 40a:	11 f0       	breq	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	96 e9       	ldi	r25, 0x96	; 150
 40e:	11 c0       	rjmp	.+34     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 410:	77 23       	and	r23, r23
 412:	21 f0       	breq	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 414:	9e e8       	ldi	r25, 0x8E	; 142
 416:	87 2f       	mov	r24, r23
 418:	76 2f       	mov	r23, r22
 41a:	05 c0       	rjmp	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41c:	66 23       	and	r22, r22
 41e:	71 f0       	breq	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 420:	96 e8       	ldi	r25, 0x86	; 134
 422:	86 2f       	mov	r24, r22
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	2a f0       	brmi	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42a:	9a 95       	dec	r25
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	da f7       	brpl	.-10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 434:	88 0f       	add	r24, r24
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	97 f9       	bld	r25, 7
 43c:	08 95       	ret

0000043e <__fp_split3>:
 43e:	57 fd       	sbrc	r21, 7
 440:	90 58       	subi	r25, 0x80	; 128
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	59 f0       	breq	.+22     	; 0x45e <__fp_splitA+0x10>
 448:	5f 3f       	cpi	r21, 0xFF	; 255
 44a:	71 f0       	breq	.+28     	; 0x468 <__fp_splitA+0x1a>
 44c:	47 95       	ror	r20

0000044e <__fp_splitA>:
 44e:	88 0f       	add	r24, r24
 450:	97 fb       	bst	r25, 7
 452:	99 1f       	adc	r25, r25
 454:	61 f0       	breq	.+24     	; 0x46e <__fp_splitA+0x20>
 456:	9f 3f       	cpi	r25, 0xFF	; 255
 458:	79 f0       	breq	.+30     	; 0x478 <__fp_splitA+0x2a>
 45a:	87 95       	ror	r24
 45c:	08 95       	ret
 45e:	12 16       	cp	r1, r18
 460:	13 06       	cpc	r1, r19
 462:	14 06       	cpc	r1, r20
 464:	55 1f       	adc	r21, r21
 466:	f2 cf       	rjmp	.-28     	; 0x44c <__fp_split3+0xe>
 468:	46 95       	lsr	r20
 46a:	f1 df       	rcall	.-30     	; 0x44e <__fp_splitA>
 46c:	08 c0       	rjmp	.+16     	; 0x47e <__fp_splitA+0x30>
 46e:	16 16       	cp	r1, r22
 470:	17 06       	cpc	r1, r23
 472:	18 06       	cpc	r1, r24
 474:	99 1f       	adc	r25, r25
 476:	f1 cf       	rjmp	.-30     	; 0x45a <__fp_splitA+0xc>
 478:	86 95       	lsr	r24
 47a:	71 05       	cpc	r23, r1
 47c:	61 05       	cpc	r22, r1
 47e:	08 94       	sec
 480:	08 95       	ret

00000482 <__fp_zero>:
 482:	e8 94       	clt

00000484 <__fp_szero>:
 484:	bb 27       	eor	r27, r27
 486:	66 27       	eor	r22, r22
 488:	77 27       	eor	r23, r23
 48a:	cb 01       	movw	r24, r22
 48c:	97 f9       	bld	r25, 7
 48e:	08 95       	ret

00000490 <__mulsf3>:
 490:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__mulsf3x>
 494:	0c 94 cc 02 	jmp	0x598	; 0x598 <__fp_round>
 498:	0e 94 be 02 	call	0x57c	; 0x57c <__fp_pscA>
 49c:	38 f0       	brcs	.+14     	; 0x4ac <__mulsf3+0x1c>
 49e:	0e 94 c5 02 	call	0x58a	; 0x58a <__fp_pscB>
 4a2:	20 f0       	brcs	.+8      	; 0x4ac <__mulsf3+0x1c>
 4a4:	95 23       	and	r25, r21
 4a6:	11 f0       	breq	.+4      	; 0x4ac <__mulsf3+0x1c>
 4a8:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_inf>
 4ac:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_nan>
 4b0:	11 24       	eor	r1, r1
 4b2:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_szero>

000004b6 <__mulsf3x>:
 4b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__fp_split3>
 4ba:	70 f3       	brcs	.-36     	; 0x498 <__mulsf3+0x8>

000004bc <__mulsf3_pse>:
 4bc:	95 9f       	mul	r25, r21
 4be:	c1 f3       	breq	.-16     	; 0x4b0 <__mulsf3+0x20>
 4c0:	95 0f       	add	r25, r21
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	55 1f       	adc	r21, r21
 4c6:	62 9f       	mul	r22, r18
 4c8:	f0 01       	movw	r30, r0
 4ca:	72 9f       	mul	r23, r18
 4cc:	bb 27       	eor	r27, r27
 4ce:	f0 0d       	add	r31, r0
 4d0:	b1 1d       	adc	r27, r1
 4d2:	63 9f       	mul	r22, r19
 4d4:	aa 27       	eor	r26, r26
 4d6:	f0 0d       	add	r31, r0
 4d8:	b1 1d       	adc	r27, r1
 4da:	aa 1f       	adc	r26, r26
 4dc:	64 9f       	mul	r22, r20
 4de:	66 27       	eor	r22, r22
 4e0:	b0 0d       	add	r27, r0
 4e2:	a1 1d       	adc	r26, r1
 4e4:	66 1f       	adc	r22, r22
 4e6:	82 9f       	mul	r24, r18
 4e8:	22 27       	eor	r18, r18
 4ea:	b0 0d       	add	r27, r0
 4ec:	a1 1d       	adc	r26, r1
 4ee:	62 1f       	adc	r22, r18
 4f0:	73 9f       	mul	r23, r19
 4f2:	b0 0d       	add	r27, r0
 4f4:	a1 1d       	adc	r26, r1
 4f6:	62 1f       	adc	r22, r18
 4f8:	83 9f       	mul	r24, r19
 4fa:	a0 0d       	add	r26, r0
 4fc:	61 1d       	adc	r22, r1
 4fe:	22 1f       	adc	r18, r18
 500:	74 9f       	mul	r23, r20
 502:	33 27       	eor	r19, r19
 504:	a0 0d       	add	r26, r0
 506:	61 1d       	adc	r22, r1
 508:	23 1f       	adc	r18, r19
 50a:	84 9f       	mul	r24, r20
 50c:	60 0d       	add	r22, r0
 50e:	21 1d       	adc	r18, r1
 510:	82 2f       	mov	r24, r18
 512:	76 2f       	mov	r23, r22
 514:	6a 2f       	mov	r22, r26
 516:	11 24       	eor	r1, r1
 518:	9f 57       	subi	r25, 0x7F	; 127
 51a:	50 40       	sbci	r21, 0x00	; 0
 51c:	9a f0       	brmi	.+38     	; 0x544 <__mulsf3_pse+0x88>
 51e:	f1 f0       	breq	.+60     	; 0x55c <__mulsf3_pse+0xa0>
 520:	88 23       	and	r24, r24
 522:	4a f0       	brmi	.+18     	; 0x536 <__mulsf3_pse+0x7a>
 524:	ee 0f       	add	r30, r30
 526:	ff 1f       	adc	r31, r31
 528:	bb 1f       	adc	r27, r27
 52a:	66 1f       	adc	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	88 1f       	adc	r24, r24
 530:	91 50       	subi	r25, 0x01	; 1
 532:	50 40       	sbci	r21, 0x00	; 0
 534:	a9 f7       	brne	.-22     	; 0x520 <__mulsf3_pse+0x64>
 536:	9e 3f       	cpi	r25, 0xFE	; 254
 538:	51 05       	cpc	r21, r1
 53a:	80 f0       	brcs	.+32     	; 0x55c <__mulsf3_pse+0xa0>
 53c:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_inf>
 540:	0c 94 42 02 	jmp	0x484	; 0x484 <__fp_szero>
 544:	5f 3f       	cpi	r21, 0xFF	; 255
 546:	e4 f3       	brlt	.-8      	; 0x540 <__mulsf3_pse+0x84>
 548:	98 3e       	cpi	r25, 0xE8	; 232
 54a:	d4 f3       	brlt	.-12     	; 0x540 <__mulsf3_pse+0x84>
 54c:	86 95       	lsr	r24
 54e:	77 95       	ror	r23
 550:	67 95       	ror	r22
 552:	b7 95       	ror	r27
 554:	f7 95       	ror	r31
 556:	e7 95       	ror	r30
 558:	9f 5f       	subi	r25, 0xFF	; 255
 55a:	c1 f7       	brne	.-16     	; 0x54c <__mulsf3_pse+0x90>
 55c:	fe 2b       	or	r31, r30
 55e:	88 0f       	add	r24, r24
 560:	91 1d       	adc	r25, r1
 562:	96 95       	lsr	r25
 564:	87 95       	ror	r24
 566:	97 f9       	bld	r25, 7
 568:	08 95       	ret

0000056a <__fp_inf>:
 56a:	97 f9       	bld	r25, 7
 56c:	9f 67       	ori	r25, 0x7F	; 127
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	08 95       	ret

00000576 <__fp_nan>:
 576:	9f ef       	ldi	r25, 0xFF	; 255
 578:	80 ec       	ldi	r24, 0xC0	; 192
 57a:	08 95       	ret

0000057c <__fp_pscA>:
 57c:	00 24       	eor	r0, r0
 57e:	0a 94       	dec	r0
 580:	16 16       	cp	r1, r22
 582:	17 06       	cpc	r1, r23
 584:	18 06       	cpc	r1, r24
 586:	09 06       	cpc	r0, r25
 588:	08 95       	ret

0000058a <__fp_pscB>:
 58a:	00 24       	eor	r0, r0
 58c:	0a 94       	dec	r0
 58e:	12 16       	cp	r1, r18
 590:	13 06       	cpc	r1, r19
 592:	14 06       	cpc	r1, r20
 594:	05 06       	cpc	r0, r21
 596:	08 95       	ret

00000598 <__fp_round>:
 598:	09 2e       	mov	r0, r25
 59a:	03 94       	inc	r0
 59c:	00 0c       	add	r0, r0
 59e:	11 f4       	brne	.+4      	; 0x5a4 <__fp_round+0xc>
 5a0:	88 23       	and	r24, r24
 5a2:	52 f0       	brmi	.+20     	; 0x5b8 <__fp_round+0x20>
 5a4:	bb 0f       	add	r27, r27
 5a6:	40 f4       	brcc	.+16     	; 0x5b8 <__fp_round+0x20>
 5a8:	bf 2b       	or	r27, r31
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <__fp_round+0x18>
 5ac:	60 ff       	sbrs	r22, 0
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__fp_round+0x20>
 5b0:	6f 5f       	subi	r22, 0xFF	; 255
 5b2:	7f 4f       	sbci	r23, 0xFF	; 255
 5b4:	8f 4f       	sbci	r24, 0xFF	; 255
 5b6:	9f 4f       	sbci	r25, 0xFF	; 255
 5b8:	08 95       	ret

000005ba <__umulhisi3>:
 5ba:	a2 9f       	mul	r26, r18
 5bc:	b0 01       	movw	r22, r0
 5be:	b3 9f       	mul	r27, r19
 5c0:	c0 01       	movw	r24, r0
 5c2:	a3 9f       	mul	r26, r19
 5c4:	70 0d       	add	r23, r0
 5c6:	81 1d       	adc	r24, r1
 5c8:	11 24       	eor	r1, r1
 5ca:	91 1d       	adc	r25, r1
 5cc:	b2 9f       	mul	r27, r18
 5ce:	70 0d       	add	r23, r0
 5d0:	81 1d       	adc	r24, r1
 5d2:	11 24       	eor	r1, r1
 5d4:	91 1d       	adc	r25, r1
 5d6:	08 95       	ret

000005d8 <_exit>:
 5d8:	f8 94       	cli

000005da <__stop_program>:
 5da:	ff cf       	rjmp	.-2      	; 0x5da <__stop_program>
